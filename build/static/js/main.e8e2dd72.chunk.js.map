{"version":3,"sources":["components/Tooltip.js","components/slider.js","index.js"],"names":["Tooltip","feature","Slider","props","myChangeHandler","event","setState","time","target","value","state","timeDesc","0","1","2","3","4","5","6","7","8","9","10","this","className","htmlFor","type","min","max","id","onChange","React","Component","mapboxgl","accessToken","Application","lng","lat","zoom","map","Map","container","mapContainer","style","center","hoveredStateId","colorCodes","11","12","13","14","15","16","17","18","19","20","21","22","on","data2","data","features","forEach","ptsWithin","within","properties","PLANTS","length","geojson","geojson2","addSource","addLayer","onZoomend","setMaxBounds","getBounds","document","getElementById","classList","remove","off","fitBounds","padding","top","bottom","left","right","element","addEventListener","newTime","timestamps","removeLayer","removeSource","addTiles","timestamp","urlTemplate","labelCodes","code","HUC2","NAME","listItems","querySelector","innerHTML","addLegend","tooltipRef","Popup","offset","closeButton","closeOnClick","e","getCanvas","cursor","prop","zone","plants","tooltipNode","createElement","ReactDOM","render","setLngLat","lngLat","setDOMContent","addTo","setFeatureState","source","hover","addInteraction","ref","el"],"mappings":"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","file":"static/js/main.e8e2dd72.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Tooltip = ({ feature }) => {\r\n\r\n  return (\r\n\r\n      <strong>{feature}</strong>\r\n  );\r\n};\r\n\r\nexport default Tooltip;","import React from \"react\";\r\n// import ReactDOM from 'react-dom';\r\n\r\nclass Slider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { time: 0 };\r\n      }\r\n    myChangeHandler = (event) => {\r\n        this.setState({time: event.target.value});\r\n        //console.log(event.target.value)\r\n      }\r\n\r\n\r\n    render(){\r\n        const timeCodes = {\r\n            0: \"50 Minutes Ago\",\r\n            1: \"45 Minutes Ago\",\r\n            2: \"40 Minutes Ago\",\r\n            3: \"35 Minutes Ago\",\r\n            4: \"30 Minutes Ago\",\r\n            5: \"25 Minutes Ago\",\r\n            6: \"20 Minutes Ago\",\r\n            7: \"15 Minutes Ago\",\r\n            8: \"10 Minutes Ago\",\r\n            9: \"5 Minutes Ago\",\r\n            10: \"Current\"\r\n        }\r\n        let timeDesc = timeCodes[this.state.time];\r\n        let time = this.state.time;\r\n        return (<div className=\"my-5\">\r\n            <h2>Weather Radar Overlay</h2>\r\n        <label htmlFor=\"customRange1\">Time: {timeDesc}</label>\r\n        <br/>\r\n        <input type=\"range\" min=\"0\" max=\"10\" value = {time} className=\"custom-range\" id=\"customRange1\" onChange={this.myChangeHandler}/>\r\n        \r\n        </div>)\r\n        }\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport data from './watersheds.json';\r\nimport data2 from './powerplants.json';\r\nimport Tooltip from './components/Tooltip';\r\nimport Slider from './components/slider';\r\nimport {within} from '@turf/turf';\r\n\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1Ijoic2Z1MjM0IiwiYSI6ImNrM29wM3phazFnMXIzanFxdGNuMG05ZzgifQ.AAYvpsqsW56C4GggaNdNrA';\r\n\r\nclass Application extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                lng: 2.28,\r\n                lat: 11.77,\r\n                zoom: 1.2\r\n            };\r\n        }\r\n\r\n        componentDidMount() {\r\n            const map = new mapboxgl.Map({\r\n                container: this.mapContainer,\r\n                style: 'mapbox://styles/mapbox/dark-v9',\r\n                center: [this.state.lng, this.state.lat],\r\n                zoom: this.state.zoom\r\n            })\r\n\r\n            let hoveredStateId = null;\r\n\r\n            const colorCodes = {\r\n                1: \"#7F3C8D\",\r\n                2: \"#11A579\",\r\n                3: \"#3969AC\",\r\n                4: \"#F2B701\",\r\n                5: \"#E73F74\",\r\n                6: \"#80BA5A\",\r\n                7: \"#E68310\",\r\n                8: \"#008695\",\r\n                9: \"#CF1C90\",\r\n                10: \"#f97b72\",\r\n                11: \"#4b4b8f\",\r\n                12: \"#A5AA99\",\r\n                13: \"#7ccba2\",\r\n                14: \"#f40cd4\",\r\n                15: \"#00364e\",\r\n                16: \"#045275\",\r\n                17: \"#00718b\",\r\n                18: \"#089099\",\r\n                19: \"#46aea0\",\r\n                20: \"#7ccba2\",\r\n                21: \"#b7e6a5\",\r\n                22: \"#f40cd4\"\r\n            }\r\n\r\n            map.on('load', () => {\r\n                //request geojson\r\n                // when loaded\r\n                countPoints(data, data2);\r\n                addLayer(data, data2);\r\n                addLegend(data);\r\n                addInteraction();\r\n\r\n\r\n            })\r\n\r\n            function countPoints(data, data2){\r\n                data.features.forEach(function(feature){\r\n                    let ptsWithin = within(data2, feature);\r\n                    feature.properties.PLANTS = ptsWithin.features.length;\r\n                })\r\n                \r\n\r\n            }\r\n\r\n            function addLayer(geojson, geojson2) {\r\n                // first add the source to the map\r\n                map.addSource('watershed', {\r\n                    type: 'geojson',\r\n                    data: geojson, // use our data as the data source\r\n                    'generateId': true\r\n                });\r\n\r\n                // add the GeoJSON data as a mapbox gl layer\r\n                map.addLayer({\r\n                    'id': 'phz',\r\n                    'type': 'fill',\r\n                    'source': 'watershed',\r\n                    'paint': {\r\n                        \"fill-color\": [\r\n                            \"match\", // match the numbers below to the GRIDCODES\r\n                            [\"string\", [\"get\", \"HUC2\"]],\r\n                            \"1\", colorCodes[1],\r\n                            \"2\", colorCodes[2],\r\n                            \"3\", colorCodes[3],\r\n                            \"4\", colorCodes[4],\r\n                            \"5\", colorCodes[5],\r\n                            \"6\", colorCodes[6],\r\n                            \"7\", colorCodes[7],\r\n                            \"8\", colorCodes[8],\r\n                            \"9\", colorCodes[9],\r\n                            \"10\", colorCodes[10],\r\n                            \"11\", colorCodes[11],\r\n                            \"12\", colorCodes[12],\r\n                            \"13\", colorCodes[13],\r\n                            \"14\", colorCodes[14],\r\n                            \"15\", colorCodes[15],\r\n                            \"16\", colorCodes[16],\r\n                            \"17\", colorCodes[17],\r\n                            \"18\", colorCodes[18],\r\n                            \"19\", colorCodes[19],\r\n                            \"20\", colorCodes[20],\r\n                            \"21\", colorCodes[21],\r\n                            \"22\", colorCodes[22],\r\n                            \"#000000\" // default for no match\r\n                        ],\r\n                        'fill-opacity': [\r\n                            'case',\r\n                            ['boolean', ['feature-state', 'hover'], false],\r\n                            1,\r\n                            0.5\r\n                        ]\r\n\r\n                    }\r\n                });\r\n\r\n                map.addSource('power', {\r\n                    type: 'geojson',\r\n                    data: geojson2, // use our data as the data source\r\n                    'generateId': true\r\n                });\r\n\r\n                map.addLayer({\r\n                    'id': 'pws',\r\n                    'type': 'circle',\r\n                    'source': 'power',\r\n                    'paint': {\r\n                        'circle-radius': 3.5,\r\n                        'circle-color': '#223b53',\r\n                        'circle-stroke-color': 'yellow',\r\n                        'circle-stroke-width': 1,\r\n                        'circle-opacity': 0.5\r\n                    }\r\n                });\r\n\r\n                map.addSource('wms-source', {\r\n                    'type': 'raster',\r\n                    'tiles': [\r\n                        'https://hydro.nationalmap.gov/arcgis/rest/services/nhd/MapServer/export?bbox={bbox-epsg-3857}&bboxSR=EPSG%3A3857&layers=3&layerDefs=&size=256%2c256&imageSR=&format=png&transparent=true&dpi=&time=&layerTimeOptions=&dynamicLayers=&gdbVersion=&mapScale=&f=image'\r\n                    ],\r\n                    'tileSize': 256\r\n                });\r\n                map.addLayer({\r\n                    'id': 'wms-layer',\r\n                    'type': 'raster',\r\n                    'source': 'wms-source',\r\n                    'paint': {}\r\n                });\r\n\r\n                const onZoomend = () => {\r\n\r\n                    // set the max bounds\r\n                    map.setMaxBounds(map.getBounds())\r\n\r\n                    // display the legend\r\n                    let el = document.getElementById('legend');\r\n                    el.classList.remove('none')\r\n\r\n                    // remove the listener\r\n                    map.off('zoomend', onZoomend);\r\n                };\r\n\r\n                // when the map is done zooming\r\n                map.on('zoomend', onZoomend);\r\n\r\n                // map will flyTo the bounds provided\r\n                map.fitBounds([-129.07, 23.02, -65.74, 50.53], {\r\n                    padding: {\r\n                        top: 20,\r\n                        bottom: 10,\r\n                        left: 12,\r\n                        right: 220\r\n                    }\r\n                });\r\n\r\n                let element = document.getElementById('customRange1');\r\n                element.addEventListener('change', function () {\r\n                    let newTime = timestamps[element.value];\r\n                    map.removeLayer('wms-test-layer')\r\n                    map.removeSource('wms-test-source')\r\n                    addTiles(newTime)\r\n                });\r\n\r\n\r\n                let timestamps = ['900913-m50m', '900913-m45m', '900913-m40m', '900913-m35m', '900913-m30m', '900913-m25m', '900913-m20m', '900913-m15m', '900913-m10m', '900913-m05m', '900913'];\r\n\r\n                function addTiles(timestamp) {\r\n                    var urlTemplate = 'https://mesonet.agron.iastate.edu/cache/tile.py/1.0.0/nexrad-n0q-' + timestamp + '/{z}/{x}/{y}.png';\r\n                    map.addSource('wms-test-source', {\r\n                        'type': 'raster',\r\n                        'tiles': [\r\n                            urlTemplate\r\n                        ],\r\n                        'tileSize': 256\r\n                    });\r\n                    map.addLayer({\r\n                        'id': 'wms-test-layer',\r\n                        'type': 'raster',\r\n                        'source': 'wms-test-source',\r\n                        'paint': {}\r\n                    });\r\n                }\r\n                addTiles('900913-m50m');\r\n\r\n            }\r\n\r\n            function addLegend(geojson) {\r\n\r\n                // build it an object for associated GRIDECODES \r\n                // with the Zone descriptions from the data\r\n                const labelCodes = {};\r\n\r\n                // loop through all the features\r\n                geojson.features.forEach((feature) => {\r\n                    // shortcut for the code\r\n                    let code = feature.properties.HUC2;\r\n                    // if it's not in our labelsCodes object yet\r\n                    if (!labelCodes[code]) {\r\n                        // create it and assign the Zone description\r\n                        labelCodes[code] = feature.properties.NAME\r\n                    }\r\n                })\r\n\r\n                // empty string for building our list items\r\n                let listItems = '';\r\n\r\n                // loop through all the colorCodes\r\n                for (let code in colorCodes) {\r\n                    // create a item for each zone \r\n                    listItems += `<li class='li h-full txt-m'>\r\n                <span class='w24 h18 mt6 fl mr12' \r\n                      style='background: ${colorCodes[code]}'>\r\n                </span>${labelCodes[code]}</li>`;\r\n                }\r\n                // select the legend ul element and insert the HTML list items\r\n                let el = document.querySelector(\"#legend ul\")\r\n                el.innerHTML = listItems;\r\n\r\n            }\r\n\r\n            function addInteraction() {\r\n\r\n                // Create a popup, but don't add it to the map yet.\r\n                const tooltipRef = new mapboxgl.Popup({\r\n                    offset: 15,\r\n                    closeButton: false,\r\n                    closeOnClick: false\r\n                });\r\n\r\n                map.on('mousemove', 'phz', e => {\r\n                        // Change the cursor style as a UI indicator.\r\n                        map.getCanvas().style.cursor = 'pointer';\r\n\r\n                        let prop = e.features[0].properties;\r\n                        let zone = prop.NAME;\r\n                        let plants = prop.PLANTS;\r\n                        let data = `Watershed: ${zone} Hydro Plants: ${plants}`;\r\n\r\n                        // popup.setLngLat(e.lngLat).setHTML(data).addTo(map);\r\n                        // Create tooltip node\r\n                        const tooltipNode = document.createElement('div');\r\n                        ReactDOM.render(<Tooltip feature = {data}/>, tooltipNode);\r\n                            // Set tooltip on map\r\n                            tooltipRef.setLngLat(e.lngLat).setDOMContent(tooltipNode).addTo(map);\r\n\r\n                            //Hover effect\r\n                            if (e.features.length > 0) {\r\n                                if (hoveredStateId) {\r\n                                    map.setFeatureState({\r\n                                        source: 'watershed',\r\n                                        id: hoveredStateId\r\n                                    }, {\r\n                                        hover: false\r\n                                    });\r\n                                }\r\n                                hoveredStateId = e.features[0].id;\r\n                                map.setFeatureState({\r\n                                    source: 'watershed',\r\n                                    id: hoveredStateId\r\n                                }, {\r\n                                    hover: true\r\n                                });\r\n                            }\r\n\r\n                        });\r\n\r\n                    map.on('mouseleave', 'phz', function () {\r\n                        map.getCanvas().style.cursor = '';\r\n                        tooltipRef.remove();\r\n\r\n                        if (hoveredStateId) {\r\n                            map.setFeatureState({\r\n                                source: 'watershed',\r\n                                id: hoveredStateId\r\n                            }, {\r\n                                hover: false\r\n                            });\r\n                        }\r\n                        hoveredStateId = null;\r\n                    });\r\n\r\n                }\r\n                ReactDOM.render( < Slider / > , document.getElementById('slider'));\r\n\r\n            }\r\n            render() {\r\n                return ( <div>\r\n                    <div id = 'legend' className = 'w180 bg-white absolute top right mt18 mr18 round shadow-darken10 px12 py12 txt-s none' >\r\n                        <strong className = 'block mb6 txt-l'>Watershed Regions</strong>  \r\n                        <ul className = 'ul mb6'>\r\n                        </ul>\r\n                        <br/>\r\n                        <div>\r\n                        <span className=\"dot\"></span><span className=\"font\">Power Plants</span>\r\n                        </div>\r\n                        <br></br>  \r\n                        <div id = 'slider'>\r\n                        </div>\r\n                    </div> \r\n                    <div ref = {el => this.mapContainer = el} className = 'mapContainer'/>\r\n                    </div>\r\n\r\n\r\n                )\r\n            }\r\n        }\r\n\r\n        ReactDOM.render( < Application / > , document.getElementById('app'));"],"sourceRoot":""}